#!/bin/sh


NEW_HNAME="$(cat /etc/hostname)"
NEW_ADDRESS=`/sbin/ifconfig eth0 | grep "inet addr:" | head -1 | awk '{print $2}'| cut -d: -f2`
NEW_DC="$(cat /etc/hostname | cut -d. -f2)"

if echo $NEW_DC | grep -Eq 'cpt[123]|jnb[12]'; then
  OLD_ADDRESS="41.203.18.225"
  OLD_HNAME="masterbuild64.jnb2.host-h.net"
  OLD_DOMAIN="jnb2.host-h.net"
  OLD_SHNAME="masterbuild64"
elif echo $NEW_DC | grep -Eq 'nur4|flk1'; then
  OLD_ADDRESS="188.40.248.69"
  OLD_HNAME="masterbuild64.flk1.host-h.net"
  OLD_DOMAIN="flk1.host-h.net"
  OLD_SHNAME="masterbuild64"
fi



echo -e "\n===============================================================\n"
echo -e "Press any key to edit the new IP and hostname:\n"
echo -e "  Hostname: ... old=$OLD_HNAME \t=>\t new=$NEW_HNAME"
echo -e "  IP: ......... old=$OLD_ADDRESS \t\t=>\t new=$NEW_ADDRESS\n  "

X=""
for i in $(seq 1 10) ; do
  echo -n "."
  read -n1 -t1 X
  [ "$X" ] && break
done
echo
if [ "$X" ] ; then
  echo -n "Enter hostname: "   ; read NEW_HNAME
  echo -n "Enter IP address: " ; read NEW_ADDRESS
fi
echo

NEW_SHNAME="$(echo $NEW_HNAME | cut -d. -f1)"



echo "...Updating /etc/hosts"
sed -i -e "s/$OLD_ADDRESS/$NEW_ADDRESS/g" /etc/hosts

echo "...Activating new hostname"
hostname $NEW_HNAME

echo "...Updating /etc/hostname"
sed -i -e "s:$OLD_HNAME:$NEW_HNAME:" /etc/hostname

#Kerberos
echo "...Installing kerberos host keytab"
#Need to create a new tempuser with key auth to run script on master kdc host
#/usr/sbin/useradd -m -d /home/kdcadd -s /bin/bash -e '' kdcadd
#ssh-keygen -t dsa -P "" -f .ssh/id_dsa
#ssh-copy-id -i .ssh/id_dsa.pub kdcadd@kdc1.cpt1.host-h.net
echo "============== Kerberos key gen ================"
touch /etc/krb5.keytab
chmod 600 /etc/krb5.keytab
su kdcadd -l -c "ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no mkservtab@kdc2.cpt2.host-h.net mkservtab $NEW_HNAME" > /etc/krb5.keytab
echo "================================================"
userdel kdcadd
rm -rf /home/kdcadd
#cd /usr/local/hetzner/_inst/kerberos
#sh install

echo "...Updating /etc/fstab"
rm /etc/fstab

linktarget=`basename "$(readlink /initrd.img)" | sed s,initrd.img-,,`

mdadm --examine --scan > /etc/mdadm/mdadm.conf 2>/dev/null
mdadm --examine --scan > /etc/mdadm/generated.conf 2>/dev/null

update-initramfs -u -k all

boot_device=$(mount | awk '$3 == "/boot" {print $1}')
cat << EOF > /etc/fstab
proc            /proc           proc    defaults        0       0
/dev/mapper/vg-root /               ext3    defaults,usrquota,errors=remount-ro 0       1
${boot_device}        /boot           ext3    defaults        0       2
/dev/mapper/vg-tmp /tmp         ext3    defaults        0       0
/dev/mapper/vg-usr /usr         ext3    defaults,usrquota       0       0
/dev/mapper/vg-var      /var    ext3    defaults        0       0
/dev/mapper/vg-vartmp   /var/tmp        ext3    defaults  0       0
/dev/mapper/vg-swap none            swap    sw              0       0
EOF

echo "...Disabling count- and interval-based fsck"
for fsname in root tmp usr usrhome var vartmp; do
	/sbin/tune2fs -c 0 -i 0 /dev/mapper/vg-$fsname >/dev/null
done

echo -e "\n"
rm -f /etc/udev/rules.d/*-net.rules

if echo $NEW_HNAME | grep -Eq '\.(cpt[123]|jnb[12]|nur4|flk1)\.'; then
	geo_domain=$(echo $NEW_HNAME  | awk -F \. '{print $2}').host-h.net
elif echo $NEW_HNAME | grep -Eq '\.(dur1\.|hetzner\.africa)'; then
	geo_domain=cpt1.host-h.net
else
	geo_domain=""
fi

#Update the puppet config file for location and fetch_hos_server from local puppetmaster1
if [ -n "$geo_domain" ]; then
      sed -i -e "s,$OLD_DOMAIN,$geo_domain,g" /etc/puppet/puppet.conf
      sed -i "s,splay=true,splay=false,g" /etc/puppet/puppet.conf
fi

echo "Cleaning up puppet"
rm -rf /var/lib/puppet/clientbucket/
find /var/lib/puppet -type f -delete

echo "Cleaning up ebackup"
rm -rf /etc/ebackup.conf

echo "Removing uptrack uuid file"
rm -f /var/lib/uptrack/uuid

if echo $NEW_HNAME | grep -q ftpbackup; then
#  echo  "Installing needed entries for ftpbackupserver.. (y/n)"
#  read ans
#  if [ "$ans" == "y" ];then
    echo "creating ftpbackupserver now"
    mkdir -p /ftpbackup
    echo "/dev/mapper/vg-bak                /ftpbackup            ext3        defaults,usrquota        0       0" >> /etc/fstab

    echo "add to konsoleh_genie database"
    PASSWD=`grep -A 3 livedb.konsoleh.co.za  /usr/local/hetzner/bin/config/connections.yml | grep password| awk {'print $2'}`
    MSQLT=$(/usr/bin/mysql -uhetzner -hlivedb.konsoleh.co.za -p`echo $PASSWD` konsoleh_genie -s -N -e "SELECT ftpb_server, (total_space - used_space) / quota FROM ftp_backup_servers;" | cut -f1 | grep  $NEW_HNAME)

    if  [ "`echo $MSQLT| grep -c $NEW_HNAME`" -eq 0 ] ;then
      /usr/bin/mysql -uhetzner -hlivedb.konsoleh.co.za -p`echo $PASSWD` konsoleh_genie -e "INSERT INTO ftp_backup_servers (datacentre ,ftpb_server ,total_space ,used_space ,quota) values ('$NEW_DC' ,'$NEW_HNAME' ,'3000' ,'0' ,'50');"
    fi

# fi
fi

echo "Updating UID's for staff"
cd /home
for i in `dir -A`; do chown -R $i:staff $i; done

echo "Fix zabbix ownership"
chown -R zabbix:zabbix /var/run/zabbix-agent
chown -R zabbix:zabbix /usr/lib/zabbix
chown -R zabbix:zabbix /var/lib/statcache

echo "Fix puppet ownership"
chown -R puppet:puppet /var/lib/puppet

echo "Fix uuid ownership"
chown -R libuuid:libuuid /var/lib/libuuid
chown -R libuuid:libuuid /usr/sbin/uuidd

echo "Fix ntp ownership"
chown -R ntp:ntp /var/lib/ntp

echo -e "...done\n"
echo "==============================================================="

